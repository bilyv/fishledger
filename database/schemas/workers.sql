-- =====================================================
-- Workers Table Schema
-- Tracks system users employed under a business
-- =====================================================

-- Workers table for system users employed under a business
CREATE TABLE IF NOT EXISTS workers (
    worker_id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    user_id UUID NOT NULL REFERENCES users(user_id) ON DELETE CASCADE, -- Data isolation: workers belong to specific user/business
    full_name VARCHAR(200) NOT NULL,
    email VARCHAR(255) NOT NULL, -- Removed UNIQUE constraint as emails can be same across different businesses
    phone_number VARCHAR(20),
    id_card_front_url TEXT, -- Front side of ID card image
    id_card_back_url TEXT, -- Back side of ID card image
    password VARCHAR(255) NOT NULL, -- Hashed password for authentication
    monthly_salary DECIMAL(10,2),
    total_revenue_generated DECIMAL(12,2) DEFAULT 0,

    -- Session Management Fields
    refresh_token_hash VARCHAR(255), -- Hashed refresh token for security
    token_version INTEGER DEFAULT 1, -- For token invalidation and security
    session_expires_at TIMESTAMP WITH TIME ZONE, -- Current session expiration
    last_login_at TIMESTAMP WITH TIME ZONE, -- Last successful login
    last_login_ip INET, -- Last login IP address
    last_login_user_agent TEXT, -- Last login user agent
    is_session_active BOOLEAN DEFAULT false, -- Whether worker has active session

    -- Enhanced Login History
    recent_login_history JSONB, -- Store detailed login history as JSON
    failed_login_attempts JSONB, -- Store failed login attempts for security

    -- Audit Fields
    created_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,

    -- Ensure worker emails are unique per business
    UNIQUE(user_id, email)
);

-- Comments for documentation
COMMENT ON TABLE workers IS 'Tracks system users employed under a business with integrated session management';
COMMENT ON COLUMN workers.worker_id IS 'Unique identifier for each worker';
COMMENT ON COLUMN workers.user_id IS 'Reference to business owner for data isolation';
COMMENT ON COLUMN workers.full_name IS 'Full name of the worker';
COMMENT ON COLUMN workers.email IS 'Worker email address for login';
COMMENT ON COLUMN workers.phone_number IS 'Worker phone number';
COMMENT ON COLUMN workers.id_card_front_url IS 'URL to front side of ID card image';
COMMENT ON COLUMN workers.id_card_back_url IS 'URL to back side of ID card image';
COMMENT ON COLUMN workers.password IS 'Hashed password for worker authentication';
COMMENT ON COLUMN workers.monthly_salary IS 'Monthly salary amount';
COMMENT ON COLUMN workers.total_revenue_generated IS 'Total revenue generated by this worker';
COMMENT ON COLUMN workers.refresh_token_hash IS 'Hashed refresh token for secure session management';
COMMENT ON COLUMN workers.token_version IS 'Version number for token invalidation and security';
COMMENT ON COLUMN workers.session_expires_at IS 'When the current session expires';
COMMENT ON COLUMN workers.last_login_at IS 'Timestamp of last successful login';
COMMENT ON COLUMN workers.last_login_ip IS 'IP address of last login for security tracking';
COMMENT ON COLUMN workers.last_login_user_agent IS 'User agent of last login for device tracking';
COMMENT ON COLUMN workers.is_session_active IS 'Whether worker currently has an active session';
COMMENT ON COLUMN workers.recent_login_history IS 'JSON array of detailed recent login history';
COMMENT ON COLUMN workers.failed_login_attempts IS 'JSON array of failed login attempts for security';
COMMENT ON COLUMN workers.created_at IS 'Timestamp when worker record was created';
COMMENT ON COLUMN workers.updated_at IS 'Timestamp when worker record was last updated';

-- Indexes for performance
CREATE INDEX IF NOT EXISTS idx_workers_user_id ON workers(user_id);
CREATE INDEX IF NOT EXISTS idx_workers_email ON workers(email);
CREATE INDEX IF NOT EXISTS idx_workers_full_name ON workers(full_name);
CREATE INDEX IF NOT EXISTS idx_workers_phone ON workers(phone_number);
CREATE INDEX IF NOT EXISTS idx_workers_session_active ON workers(is_session_active) WHERE is_session_active = true;
CREATE INDEX IF NOT EXISTS idx_workers_session_expires ON workers(session_expires_at);
CREATE INDEX IF NOT EXISTS idx_workers_last_login ON workers(last_login_at);
CREATE INDEX IF NOT EXISTS idx_workers_token_version ON workers(worker_id, token_version);

-- Function to automatically update updated_at timestamp for workers
CREATE OR REPLACE FUNCTION update_workers_updated_at()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = CURRENT_TIMESTAMP;
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger to update updated_at on workers table updates
CREATE TRIGGER trigger_update_workers_updated_at
    BEFORE UPDATE ON workers
    FOR EACH ROW
    EXECUTE FUNCTION update_workers_updated_at();

-- Function to clean up expired worker sessions
CREATE OR REPLACE FUNCTION cleanup_expired_worker_sessions()
RETURNS INTEGER AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE workers
    SET is_session_active = false,
        refresh_token_hash = NULL,
        session_expires_at = NULL
    WHERE session_expires_at < CURRENT_TIMESTAMP
    AND is_session_active = true;

    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RETURN updated_count;
END;
$$ LANGUAGE plpgsql;

-- Function to invalidate all sessions for a worker (useful for security incidents)
CREATE OR REPLACE FUNCTION invalidate_worker_sessions(p_worker_id UUID)
RETURNS BOOLEAN AS $$
DECLARE
    updated_count INTEGER;
BEGIN
    UPDATE workers
    SET is_session_active = false,
        refresh_token_hash = NULL,
        session_expires_at = NULL,
        token_version = token_version + 1
    WHERE worker_id = p_worker_id;

    GET DIAGNOSTICS updated_count = ROW_COUNT;
    RETURN updated_count > 0;
END;
$$ LANGUAGE plpgsql;

-- Row Level Security (RLS) policies
ALTER TABLE workers ENABLE ROW LEVEL SECURITY;

-- Policy: Business owners can view all workers
CREATE POLICY workers_select_all ON workers
    FOR SELECT
    USING (auth.uid() IS NOT NULL);

-- Policy: Business owners can insert worker records
CREATE POLICY workers_insert_owner ON workers
    FOR INSERT
    WITH CHECK (auth.uid() IS NOT NULL);

-- Policy: Business owners can update worker records
CREATE POLICY workers_update_owner ON workers
    FOR UPDATE
    USING (auth.uid() IS NOT NULL);

-- Policy: Business owners can delete worker records
CREATE POLICY workers_delete_owner ON workers
    FOR DELETE
    USING (auth.uid() IS NOT NULL);

-- Sample data for development
-- Note: Using bcrypt hashed password for 'password123' for development
INSERT INTO workers (full_name, email, phone_number, password, monthly_salary, total_revenue_generated) VALUES
('Jane Doe', 'jane@aquafresh.com', '+1-555-0001', '$2b$10$rOvHPGWQSOuLO/VqFkqfHOGjV8YM8S8qvnkZgKjYxqJ5YzQqJ5YzQ', 3000.00, 15000.00),
('Mike Johnson', 'mike@aquafresh.com', '+1-555-0002', '$2b$10$rOvHPGWQSOuLO/VqFkqfHOGjV8YM8S8qvnkZgKjYxqJ5YzQqJ5YzQ', 2800.00, 12500.00)
ON CONFLICT (email) DO NOTHING;
